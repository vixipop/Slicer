/**
 * @author       Yannick Deubel (https://github.com/yandeu)
 * @copyright    Copyright (c) 2020 Yannick Deubel; Project Url: https://github.com/enable3d/enable3d
 * @license      {@link https://github.com/enable3d/enable3d/blob/master/LICENSE|LGPL-3.0}
 */
import { BufferGeometry, Group, Line, LineBasicMaterial, Mesh, MeshBasicMaterial, RingGeometry, Scene, Vector3, WebGLRenderer } from 'three';
import { XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory.js';
export default class WebXR {
    private _renderer;
    private _scene;
    cameraGroup: Group;
    controllerModelFactory: XRControllerModelFactory;
    constructor(_renderer: WebGLRenderer, _scene: Scene);
    get isPresenting(): boolean;
    getController(id: number): import("three").XRTargetRaySpace;
    getControllerGrip(id: number): import("three").XRGripSpace;
    getControllerRay(data: any): Line<BufferGeometry<import("three").NormalBufferAttributes>, LineBasicMaterial> | Mesh<RingGeometry, MeshBasicMaterial, import("three").Object3DEventMap> | undefined;
    get camera(): {
        group: Group<import("three").Object3DEventMap>;
        position: Vector3;
        rotation: import("three").Euler | undefined;
        getWorldDirection: (target: Vector3) => Vector3 | undefined;
    };
    private get WebXRCamera();
}
//# sourceMappingURL=webxr.d.ts.map