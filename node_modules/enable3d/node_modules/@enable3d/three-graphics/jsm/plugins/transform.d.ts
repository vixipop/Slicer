import { Mesh, OrthographicCamera, PerspectiveCamera, Raycaster, Shape, Vector2, Vector3, WebGLRenderer } from 'three';
/**
 * @author       Yannick Deubel (https://github.com/yandeu)
 * @copyright    Copyright (c) 2020 Yannick Deubel; Project Url: https://github.com/enable3d/enable3d
 * @license      {@link https://github.com/enable3d/enable3d/blob/master/LICENSE|LGPL-3.0}
 */
export default class Transform {
    private camera;
    private renderer;
    tmpPlane: Mesh;
    tmpRaycaster: Raycaster;
    tmpVector2: Vector2;
    tmpVector3: Vector3;
    constructor(camera: PerspectiveCamera | OrthographicCamera, renderer: WebGLRenderer);
    /**
     * Transforms your svg files to paths.
     */
    fromSVGtoShape(svg: string): Shape[];
    from3dto2d(position: Vector3): Vector2;
    /**
     *
     * @param x X coordinate in normalized device coordinate (NDC) (-1 to +1).
     * @param y Y coordinate in normalized device coordinate (NDC) (-1 to +1).
     * @param distanceFromCamera The distance from the camera.
     */
    from2dto3d(x: number, y: number, distanceFromCamera: number): Vector3 | undefined;
}
//# sourceMappingURL=transform.d.ts.map