/**
 * @author       Yannick Deubel (https://github.com/yandeu)
 * @copyright    Copyright (c) 2020 Yannick Deubel; Project Url: https://github.com/enable3d/enable3d
 * @license      {@link https://github.com/enable3d/enable3d/blob/master/LICENSE|LGPL-3.0}
 */
import { ColorRepresentation, Object3D, Scene } from 'three';
import { AmbientLight, DirectionalLight, HemisphereLight, PointLight, RectAreaLight, SpotLight } from 'three';
import { DirectionalLightHelper, SpotLightHelper } from 'three';
declare class PointLightHelper extends Object3D {
    private scene;
    light: PointLight;
    size?: number | undefined;
    color?: ColorRepresentation | undefined;
    private geo;
    private mat;
    private mesh;
    constructor(scene: Scene, light: PointLight, size?: number | undefined, color?: ColorRepresentation | undefined);
    dispose(): void;
    update(): void;
}
export default class Lights {
    private scene;
    constructor(scene: Scene);
    get helper(): {
        directionalLightHelper: (light: DirectionalLight, size?: number | undefined, color?: ColorRepresentation) => DirectionalLightHelper;
        spotLightHelper: (light: SpotLight, color?: ColorRepresentation) => SpotLightHelper;
        pointLightHelper: (light: PointLight, size?: number | undefined, color?: ColorRepresentation) => PointLightHelper;
    };
    directionalLight(options?: {
        color?: ColorRepresentation;
        intensity?: number | undefined;
    }): DirectionalLight;
    hemisphereLight(options?: {
        skyColor?: ColorRepresentation;
        groundColor?: ColorRepresentation;
        intensity?: number | undefined;
    }): HemisphereLight;
    ambientLight(options?: {
        color?: ColorRepresentation;
        intensity?: number | undefined;
    }): AmbientLight;
    pointLight(options?: {
        color?: ColorRepresentation;
        intensity?: number | undefined;
        distance?: number | undefined;
        decay?: number | undefined;
    }): PointLight;
    spotLight(options?: {
        color?: ColorRepresentation;
        intensity?: number | undefined;
        distance?: number | undefined;
        angle?: number | undefined;
        penumbra?: number | undefined;
        decay?: number | undefined;
    }): SpotLight;
    rectAreaLight(options?: {
        color?: ColorRepresentation;
        intensity?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
    }): RectAreaLight;
}
export {};
//# sourceMappingURL=lights.d.ts.map