/**
 * @author       Yannick Deubel (https://github.com/yandeu)
 * @copyright    Copyright (c) 2020 Yannick Deubel; Project Url: https://github.com/enable3d/enable3d
 * @license      {@link https://github.com/enable3d/enable3d/blob/master/LICENSE|LGPL-3.0}
 */
import { Cache, Group, Texture } from 'three';
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader.js';
import { SVGResult } from 'three/examples/jsm/loaders/SVGLoader.js';
import type { Atlas } from '../flat/textureAtlas';
export default class Loaders {
    private cache;
    private textureAnisotropy;
    private _fileLoader;
    private _imgLoader;
    private _svgLoader;
    private _textureLoader;
    private _objectLoader;
    private _gltfLoader;
    private _fbxLoader;
    constructor(cache: typeof Cache, textureAnisotropy: number);
    private get fileLoader();
    private get imageLoader();
    private get svgLoader();
    private get textureLoader();
    private get objectLoader();
    private get gltfLoader();
    private get fbxLoader();
    preload(key: string, url: string): Promise<unknown>;
    textureAtlas(texture: string, json: string, _type?: string): Promise<Atlas>;
    file(url: string): Promise<unknown>;
    svg(url: string): Promise<SVGResult>;
    texture(url: string): Promise<Texture>;
    object(url: string): Promise<any>;
    gltf(url: string): Promise<GLTF>;
    fbx(url: string): Promise<Group>;
}
//# sourceMappingURL=loaders.d.ts.map