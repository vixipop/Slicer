/**
 * @author       Yannick Deubel (https://github.com/yandeu)
 * @copyright    Copyright (c) 2022 Yannick Deubel; Project Url: https://github.com/enable3d/enable3d
 * @license      {@link https://github.com/enable3d/enable3d/blob/master/LICENSE|LGPL-3.0}
 */
import { CSG } from 'three-csg-ts';
/**
 * CSG wrapper for enable3d
 *
 * The CSG library does not support buffer geometries.
 * Means we first make sure we are dealing with geometries
 * and then transform them back to buffer geometries.
 */
class CSGWrapper {
    static union(meshA, meshB) {
        const meshC = this.doCSG(meshA, meshB, 'union');
        return meshC;
    }
    static subtract(meshA, meshB) {
        const meshC = this.doCSG(meshA, meshB, 'subtract');
        return meshC;
    }
    static intersect(meshA, meshB) {
        const meshC = this.doCSG(meshA, meshB, 'intersect');
        return meshC;
    }
    static doCSG(meshA, meshB, operation) {
        meshA.updateMatrix();
        meshB.updateMatrix();
        if (operation === 'union')
            return CSG.union(meshA, meshB);
        if (operation === 'subtract')
            return CSG.subtract(meshA, meshB);
        if (operation === 'intersect')
            return CSG.intersect(meshA, meshB);
        return undefined;
    }
}
export { CSGWrapper as CSG };
//# sourceMappingURL=index.js.map