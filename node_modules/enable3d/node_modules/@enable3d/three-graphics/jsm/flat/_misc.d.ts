/**
 * @author       Yannick Deubel (https://github.com/yandeu)
 * @copyright    Copyright (c) 2021 Yannick Deubel; Project Url: https://github.com/enable3d/enable3d
 * @license      {@link https://github.com/enable3d/enable3d/blob/master/LICENSE|LGPL-3.0}
 */
import { Camera, Texture } from 'three';
import type { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
export declare const roundRect: (ctx: CanvasRenderingContext2D, x: number, y: number, w: number, h: number, r: number) => void;
export declare const fontHeightCache: Map<string, number>;
export declare const calcHeight: (text: string, fontSize: number, fontFamily: string, lineHeight?: number) => number;
export declare const calcWidth: (ctx: CanvasRenderingContext2D, lines: string[]) => number;
export declare const createNewTexture: (image: any) => Texture;
export declare const canvas: HTMLCanvasElement;
export declare const setSize: (width: number, height: number) => void;
export declare const setParent: (canvas: HTMLCanvasElement) => void;
export declare const getParent: () => HTMLCanvasElement;
export declare const setOrbitControls: (orbitControls?: OrbitControls) => void;
export declare const destroy: () => void;
export declare const addObject: (object: any) => void;
export declare const clearObjects: () => void;
export declare const updateEvents: (camera: Camera) => Promise<import("three").Intersection<import("three").Object3D<import("three").Object3DEventMap>>[] | undefined>;
//# sourceMappingURL=_misc.d.ts.map