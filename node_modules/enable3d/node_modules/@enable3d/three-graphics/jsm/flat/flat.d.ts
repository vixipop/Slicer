/**
 * @author       Yannick Deubel (https://github.com/yandeu)
 * @copyright    Copyright (c) 2021 Yannick Deubel; Project Url: https://github.com/enable3d/enable3d
 * @license      {@link https://github.com/enable3d/enable3d/blob/master/LICENSE|LGPL-3.0}
 */
import type { WebGLRenderer } from 'three';
import type { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
import { Scene, OrthographicCamera } from 'three';
export { updateEvents, getParent, destroy, setSize } from './_misc';
export interface FlatInitConfig {
    width?: number;
    height?: number;
    /**
     * Size of the renderer.
     * Usually: renderer.getSize(new Vector2())
     */
    size?: {
        x: number;
        y: number;
    };
}
export interface FlatArea {
    camera: OrthographicCamera;
    scene: Scene;
}
/** Init the 2D element support. */
export declare const init: (renderer: WebGLRenderer, config?: FlatInitConfig) => FlatArea;
/** Use this if you need events on the 2D elements. */
export declare const initEvents: ({ canvas, orbitControls }: {
    canvas: HTMLCanvasElement;
    orbitControls?: OrbitControls | undefined;
}) => void;
export declare const preRender: (renderer: WebGLRenderer) => void;
export declare const postRender: (renderer: WebGLRenderer, flatArea: FlatArea) => void;
//# sourceMappingURL=flat.d.ts.map