/**
 * @author       Yannick Deubel (https://github.com/yandeu)
 * @copyright    Copyright (c) 2021 Yannick Deubel; Project Url: https://github.com/enable3d/enable3d
 * @license      {@link https://github.com/enable3d/enable3d/blob/master/LICENSE|LGPL-3.0}
 */
import { SimpleSprite } from './simpleSprite';
import { Events } from '@yandeu/events';
export class ActionSprite extends SimpleSprite {
    get frame() {
        return {
            name: this._frame.name,
            index: this._frame.index,
            width: (this._frame.width * this._internalScale.x * 1) / this._pixelRatio,
            height: (this._frame.height * this._internalScale.y * 1) / this._pixelRatio
        };
    }
    get anims() {
        return {
            add: this._add.bind(this),
            get: this.getAnimationByName.bind(this),
            play: this._play.bind(this),
            stop: this._stop.bind(this),
            getName: () => this._currentAnimationName,
            name: this._currentAnimationName
        };
    }
    constructor(texture) {
        super(texture);
        this._anims = [];
        this._flipX = false;
        this._frame = {
            name: '',
            index: -1,
            width: -1,
            height: -1
        };
        this._currentIndex = 0;
        this._currentAnimationName = '';
    }
    getAnimationByName(name) {
        return this._anims.filter(a => a.name === name)[0];
    }
    _add(name, frameOptions) {
        const { start, end, rate = 30, repeat = -1, timeline = [] } = frameOptions;
        if (this.getAnimationByName(name)) {
            console.warn(`The animation "${name}" does already exist!`);
            return;
        }
        if (timeline.length === 0) {
            if (typeof end === 'undefined' || typeof start === 'undefined') {
                console.warn(`You need to provide "start" and "end or a "timeline"!`);
                return;
            }
            for (let i = start; i <= end; i++) {
                timeline.push(i);
            }
        }
        this._anims.push({ name, timeline, rate, repeat });
    }
    _stop() {
        if (this.interval)
            clearInterval(this.interval);
    }
    _play(name) {
        this._stop();
        this._currentAnimationName = name;
        const animation = this.getAnimationByName(name);
        if (!animation)
            console.warn(`Animation "${name}" does not exist!`);
        const { timeline, rate, repeat } = animation;
        this._currentIndex = -1;
        let loops = 0;
        const playNextFrame = () => {
            this._currentIndex++;
            if (this._currentIndex >= timeline.length) {
                this._currentIndex = 0;
                loops++;
            }
            const shouldStop = !(repeat === -1 || loops < repeat);
            if (shouldStop) {
                this._stop();
                this._events.emit('complete');
                return;
            }
            this.setFrame(timeline[this._currentIndex]);
        };
        playNextFrame();
        this.interval = window.setInterval(() => {
            playNextFrame();
        }, 1000 / rate);
        return { onComplete: (cb) => this._events.once('complete', cb) };
    }
    get _events() {
        return {
            emit: (event) => {
                if (!this._eventEmitter)
                    this._eventEmitter = new Events();
                this._eventEmitter.emit(event);
            },
            once: (event, callback) => {
                if (!this._eventEmitter)
                    this._eventEmitter = new Events();
                this._eventEmitter.once(event, callback);
            }
        };
    }
}
//# sourceMappingURL=actionSprite.js.map